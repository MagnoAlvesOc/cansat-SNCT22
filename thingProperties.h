// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

const char DEVICE_LOGIN_NAME[]  = "";

const char SSID[]               = SECRET_SSID;    // Network SSID (name)
const char PASS[]               = SECRET_OPTIONAL_PASS;    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[]  = SECRET_DEVICE_KEY;    // Secret device password

void onChatChange();
void onChat2Change();
void onChat3Change();
void onAccXChange();
void onAccYChange();
void onAccZChange();
void onAltitudeChange();
void onGyroXChange();
void onGyroYChange();
void onGyroZChange();
void onPressaoChange();
void onUmidadeChange();

String chat;
String chat2;
String chat3;
float accX;
float accY;
float accZ;
float altitude;
float gyroX;
float gyroY;
float gyroZ;
CloudTemperatureSensor temperatura;
int pressao;
CloudLocation maps;
CloudRelativeHumidity umidade;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(chat, READWRITE, ON_CHANGE, onChatChange);
  ArduinoCloud.addProperty(chat2, READWRITE, ON_CHANGE, onChat2Change);
  ArduinoCloud.addProperty(chat3, READWRITE, ON_CHANGE, onChat3Change);
  ArduinoCloud.addProperty(accX, READWRITE, ON_CHANGE, onAccXChange);
  ArduinoCloud.addProperty(accY, READWRITE, ON_CHANGE, onAccYChange);
  ArduinoCloud.addProperty(accZ, READWRITE, ON_CHANGE, onAccZChange);
  ArduinoCloud.addProperty(altitude, READWRITE, ON_CHANGE, onAltitudeChange);
  ArduinoCloud.addProperty(gyroX, READWRITE, ON_CHANGE, onGyroXChange);
  ArduinoCloud.addProperty(gyroY, READWRITE, ON_CHANGE, onGyroYChange);
  ArduinoCloud.addProperty(gyroZ, READWRITE, ON_CHANGE, onGyroZChange);
  ArduinoCloud.addProperty(temperatura, READ, ON_CHANGE, NULL);
  ArduinoCloud.addProperty(pressao, READWRITE, ON_CHANGE, onPressaoChange);
  ArduinoCloud.addProperty(maps, READ, ON_CHANGE, NULL);
  ArduinoCloud.addProperty(umidade, READWRITE, ON_CHANGE, onUmidadeChange);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);
